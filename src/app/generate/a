https://careers.inkoop.io/job_posts/js-developer-intern/applicants/9B2fTkM8iQqUMwavPwTkKKqt



'use client';
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import React, { useState } from "react";
import { jsPDF } from "jspdf";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";

const Page = () => {
  // State to store form data
  const [invoiceId, setInvoiceId] = useState("");
  const [invoiceDate, setInvoiceDate] = useState(null);
  const [dueDate, setDueDate] = useState(null);
  const [paymentTerms, setPaymentTerms] = useState("");
  const [billedTo, setBilledTo] = useState("");
  const [image, setImage] = useState(null);

  // Handle image upload
  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(URL.createObjectURL(file));
    }
  };

  // Function to generate the invoice PDF
  const generatePDF = () => {
    const doc = new jsPDF();

    doc.setFontSize(18);
    doc.text("Invoice", 14, 22);
    
    doc.setFontSize(12);
    doc.text(`Invoice ID: ${invoiceId}`, 14, 40);
    doc.text(`Invoice Date: ${invoiceDate ? invoiceDate.toLocaleDateString() : ""}`, 14, 50);
    doc.text(`Due Date: ${dueDate ? dueDate.toLocaleDateString() : ""}`, 14, 60);
    doc.text(`Payment Terms: ${paymentTerms}`, 14, 70);
    doc.text(`Billed To: ${billedTo}`, 14, 80);

    // If there's an image, embed it in the PDF
    if (image) {
      const img = new Image();
      img.src = image;
      img.onload = () => {
        doc.addImage(img, "JPEG", 14, 90, 180, 160); // Adjust the position and size of the image as needed
        doc.save("invoice.pdf");
      };
    } else {
      doc.save("invoice.pdf");
    }
  };

  return (
    <div className="mt-10">
      <Card className="dark p-3 h-screen">
        <h1 className="text-3xl font-bold text-[#E4E5E7]">Invoice</h1>
        <div className="flex items-center justify-between">
          <div className="mt-5 flex flex-col gap-3 w-[50%]">
            <div className="flex justify-between w-full items-center">
              <h3 className="text-xl w-60">Invoice: Id</h3>
              <Input
                placeholder="Assign invoice id"
                className="w-full"
                value={invoiceId}
                onChange={(e) => setInvoiceId(e.target.value)}
              />
            </div>
            <div className="flex justify-between w-full items-center">
              <h3 className="text-xl w-60">Invoice Date</h3>
              <DatePicker
                selected={invoiceDate}
                onChange={(date) => setInvoiceDate(date)}
                dateFormat="MM/dd/yyyy"
                className="w-full p-2 border rounded"
                placeholderText="Select Invoice Date"
              />
            </div>
            <div className="flex justify-between w-full items-center">
              <h3 className="text-xl w-60">Due Date</h3>
              <DatePicker
                selected={dueDate}
                onChange={(date) => setDueDate(date)}
                dateFormat="MM/dd/yyyy"
                className="w-full p-2 border rounded"
                placeholderText="Select Due Date"
              />
            </div>
            <div className="flex justify-between w-full items-center">
              <h3 className="text-xl w-60">Payment Terms</h3>
              <Input
                placeholder="Assign payment terms"
                className="w-full"
                value={paymentTerms}
                onChange={(e) => setPaymentTerms(e.target.value)}
              />
            </div>
            <div className="flex justify-between w-full items-center">
              <div>
                <label>Billed To</label>
                <textarea
                  placeholder="Billed To"
                  className="w-full"
                  value={billedTo}
                  onChange={(e) => setBilledTo(e.target.value)}
                />
              </div>
            </div>
          </div>

          {/* Image Upload */}
          <div className="mt-5">
            <input type="file" onChange={handleImageUpload} />
            {image && <img src={image} alt="Uploaded" className="mt-3 w-32 h-32 object-cover" />}
          </div>
        </div>

        {/* Generate PDF Button */}
        <button
          onClick={generatePDF}
          className="mt-5 bg-blue-500 text-white p-2 rounded"
        >
          Generate Invoice PDF
        </button>
      </Card>
    </div>
  );
};

export default Page;
